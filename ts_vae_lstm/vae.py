# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_vae.ipynb.

# %% auto 0
__all__ = ['StochasticSampler', 'Encoder', 'Decoder', 'VAE', 'loss_func']

# %% ../nbs/01_vae.ipynb 3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime as dt
from .concepts import get_window
import os

# %% ../nbs/01_vae.ipynb 15
from torch.utils.data import Dataset, DataLoader
from torch import nn
import torch.nn.functional as F
import torch

# %% ../nbs/01_vae.ipynb 25
class StochasticSampler(nn.Module):
    def __init__(self, ):
        super().__init__()
        self.z_space_distr = torch.distributions.Normal(loc=0, scale=1)
        
    def forward(self, z_mean, z_log_var): 
        # z_mean and z_log_var are mean and log-var estimates of the latent space
        # under the assumption that the latent space is a gaussian normal
        device = z_mean.device
        eps = self.z_space_distr.sample(z_mean.shape).to(device)
        return z_mean + torch.exp(0.5 * z_log_var) * eps

# %% ../nbs/01_vae.ipynb 26
class Encoder(nn.Module):
    def __init__(self, latent_dim=20):
        super().__init__()
        self.flatten = nn.Flatten()
        self.linear1 = nn.Linear(in_features=window_size*4, out_features=512, bias=True)
        self.linear_mean = nn.Linear(in_features=512, out_features=latent_dim, bias=True)
        self.linear_var = nn.Linear(in_features=512, out_features=latent_dim, bias=True)
    
    def forward(self, x):
        x = F.relu(self.linear1(self.flatten(x)))
        z_mean = self.linear_mean(x)
        z_log_var = self.linear_var(x)
        return z_mean, z_log_var 


# %% ../nbs/01_vae.ipynb 28
class Decoder(nn.Module):
    def __init__(self, latent_dim=20, output_shape=(window_size, 4)):
        super().__init__() 
        self.linear1 = nn.Linear(in_features=latent_dim, out_features=512, bias=True)
        self.linear2 = nn.Linear(in_features=512, out_features=window_size*4, bias=True) 
        self.output_shape = output_shape
        
    def forward(self, x):
        x = F.leaky_relu(self.linear1(x))
        out = self.linear2(x)  # no need of sigmoid
        return self.reshape_to_output(out)
    
    def reshape_to_output(self, x):
        return x.reshape(-1, *self.output_shape)
    
    


# %% ../nbs/01_vae.ipynb 31
class VAE(nn.Module):
    def __init__(self, latent_dim=20, input_shape=(window_size, 4)):
        super().__init__() 
        self.encoder = Encoder(latent_dim=latent_dim)
        self.decoder = Decoder(latent_dim=latent_dim, output_shape=input_shape)
        self.latent_sampler = StochasticSampler()
        
    def forward(self, x):
        z_mean, z_log_var = self.encoder(x)
        z = self.latent_sampler(z_mean, z_log_var)
        out = self.decoder(z)
        # loss to enforce all possible values are sampled from latent space
        # should be of the size of the batch
        loss_kl = -0.5 * torch.sum(1 + z_log_var - z_mean.pow(2) - z_log_var.exp(), dim=1)
        return out, loss_kl

# %% ../nbs/01_vae.ipynb 33
def loss_func(inputs, targets, loss_kl, beta=0.5):
    # targets = torch.where(targets >= 0, 1., 0.)
    bs = inputs.shape[0]
    loss_reconstruct = F.huber_loss(inputs, targets, reduction='none').mean((1, 2)) 
    # should be of the size of the batch to add losses correctly
    # loss_kl of shape bs,
    # loss_reconstruct of shape bs,
    # print(loss_reconstruct.shape, loss_kl.shape)
    return torch.mean(loss_reconstruct + beta * loss_kl)
